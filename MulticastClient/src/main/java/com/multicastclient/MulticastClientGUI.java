/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.multicastclient;

//import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.GridBagConstraints;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MulticastSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * Classe d'exécution principale et de gestion de l'interface du programme
 */
public class MulticastClientGUI extends javax.swing.JFrame {
    MulticastSocket clientSocket;
    ReceiveThreadGUI receiveThread;
    GridBagConstraints chatPanelConstraints;
    DefaultListModel modelListeMessages;
    int port;
    InetAddress host;
    String nomUtilisateur;

    /**
     * Creates new form EchoClientGUI
     */
    public MulticastClientGUI() {
        initComponents();

        chatPanelConstraints = new GridBagConstraints();
        chatPanelConstraints.gridy = 0;
        chatPanelConstraints.fill = GridBagConstraints.BOTH;
        modelListeMessages = new DefaultListModel();
        jList1.setModel(modelListeMessages);
        jList1.setCellRenderer(new MyCellRenderer());
        nomUtilisateur = JOptionPane.showInputDialog(this, "Entrez un nom d'utilisateur", "Nom d'utilisateur", JOptionPane.QUESTION_MESSAGE);
        if (nomUtilisateur == null) {
            System.exit(1);
        }
    }

    /**
     * Ajoute un message à l'interface de chat du programme
     * @param msg Message à ajouter
     */
    synchronized public void addMessage(String msg) {
        java.awt.EventQueue.invokeLater(() -> {
            modelListeMessages.addElement(msg);
            repaint();
        });
    }

    /**
     * Supprime les messages affichés sur l'interface du programme
     */
    synchronized public void clearMessages() {
        java.awt.EventQueue.invokeLater(() -> {
            modelListeMessages.clear();
            repaint();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(450, 300));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jButton1.setText("Envoyer");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.ipadx = 58;
        gridBagConstraints.insets = new java.awt.Insets(6, 5, 0, 6);
        getContentPane().add(jButton1, gridBagConstraints);

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 218;
        gridBagConstraints.ipady = 126;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jScrollPane5.setMaximumSize(new java.awt.Dimension(32767, 16));

        jTextArea1.setColumns(20);
        jTextArea1.setMaximumSize(new java.awt.Dimension(2147483647, 10));
        jScrollPane5.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 218;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 0);
        getContentPane().add(jScrollPane5, gridBagConstraints);

        jMenu1.setText("Connexion");

        jMenuItem1.setText("Se connecter");
        jMenuItem1.setName("btConnexion"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConnexionActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Se déconnecter");
        jMenuItem2.setName("btDeconnexion"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeconnexionActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String msg = jTextArea1.getText();
        if (msg.isBlank()) {
            JOptionPane.showMessageDialog(this, "Veuillez donner un message qui n'est pas vide sinon ça va pas le faire", "Erreur", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                byte[] buf = (nomUtilisateur + "[" + new Date().toString() + "]: " + msg).getBytes();
                DatagramPacket datagram = new DatagramPacket(buf, buf.length, host, port);
                clientSocket.send(datagram);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Echec de l'envoi", "Erreur", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(MulticastClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void closeEverything() {
        final JFrame parent = this;
        new Thread(() -> {
            if (clientSocket != null && !clientSocket.isClosed()) {
                try {
                    clientSocket.leaveGroup(host);
                    clientSocket.close();
                    jButton1.setEnabled(false);
                    JOptionPane.showMessageDialog(parent, "Déconnexion réussie", "Déconnexion", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(parent, "Echec de déconnexion", "Erreur", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(MulticastClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(parent, "Vous n'êtes pas connecté...", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        }).start();
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeEverything();
    }//GEN-LAST:event_formWindowClosing

    private void btConnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConnexionActionPerformed
        final MulticastClientGUI parent = this;
        new Thread(() -> {
            try {
                JPanel panelDialog = new JPanel();
                JTextField fieldAdresse = new JTextField(5);
                JTextField fieldPort = new JTextField(5);
                panelDialog.add(new JLabel("Adresse:"));
                panelDialog.add(fieldAdresse);
                panelDialog.add(Box.createHorizontalStrut(15)); // a spacer
                panelDialog.add(new JLabel("Port:"));
                panelDialog.add(fieldPort);
                
                int res = JOptionPane.showConfirmDialog(parent, panelDialog, "Entrez les informations de connexion", JOptionPane.OK_CANCEL_OPTION);
                port = Integer.parseInt(fieldPort.getText());
                host = InetAddress.getByName(fieldAdresse.getText());
                if (res == JOptionPane.OK_OPTION) {
                    try {
                        if (clientSocket == null || (clientSocket != null && clientSocket.isClosed())) {
                            clientSocket = new MulticastSocket(port);
                        }
                        clientSocket.joinGroup(host);
                        receiveThread = new ReceiveThreadGUI(clientSocket, parent);
                        receiveThread.start();
                        JOptionPane.showMessageDialog(parent, "Connexion établie", "Réussite", JOptionPane.INFORMATION_MESSAGE);
                        jButton1.setEnabled(true);
                    } catch (IOException ex) {
                        JOptionPane.showMessageDialog(parent, "Echec de connexion", "Erreur", JOptionPane.ERROR_MESSAGE);
                        Logger.getLogger(MulticastClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } catch (UnknownHostException ex) {
                JOptionPane.showMessageDialog(parent, "Echec de connexion", "Erreur", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(MulticastClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }//GEN-LAST:event_btConnexionActionPerformed

    private void btDeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeconnexionActionPerformed
        closeEverything();
    }//GEN-LAST:event_btDeconnexionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MulticastClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MulticastClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MulticastClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MulticastClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //FlatDarkLaf.setup();
                new MulticastClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
