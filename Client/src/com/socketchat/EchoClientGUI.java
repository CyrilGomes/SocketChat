/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.socketchat;

import com.formdev.flatlaf.FlatDarkLaf;
import com.google.gson.Gson;
import java.awt.GridBagConstraints;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author creep
 */
public class EchoClientGUI extends javax.swing.JFrame {

    String nomUtilisateur;
    Socket clientSocket;
    EmissionThread emissionThread;
    RecieveThread recieveThread;
    String roomName = "";
    String destUsername = "";

    BufferedReader socIn;
    PrintWriter socOut;
    GridBagConstraints chatPanelConstraints;
    DefaultListModel modelListeMessages;

    /**
     * Creates new form EchoClientGUI
     */
    public EchoClientGUI() {
        initComponents();

        chatPanelConstraints = new GridBagConstraints();
        chatPanelConstraints.gridy = 0;
        chatPanelConstraints.fill = GridBagConstraints.BOTH;
        modelListeMessages = new DefaultListModel();
        jList1.setModel(modelListeMessages);
        jList1.setCellRenderer(new MyCellRenderer());
        nomUtilisateur = JOptionPane.showInputDialog(this, "Entrez un nom d'utilisateur", "Nom d'utilisateur", JOptionPane.QUESTION_MESSAGE);
        if (nomUtilisateur == null) {
            System.exit(1);
        }

    }

    synchronized public void addMessage(String author, Date timestamp, String content) {
        java.awt.EventQueue.invokeLater(() -> {
            modelListeMessages.addElement("(" + timestamp.toString() + ") " + author + " - " + content);
            repaint();
        });
    }

    synchronized public void clearMessages() {
        java.awt.EventQueue.invokeLater(() -> {
            modelListeMessages.clear();
            repaint();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        joinRoomBtn = new javax.swing.JButton();
        usernameTextField = new javax.swing.JTextField();
        roomTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(450, 300));
        setPreferredSize(new java.awt.Dimension(250, 382));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jButton1.setText("Envoyer");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 58;
        gridBagConstraints.insets = new java.awt.Insets(6, 5, 0, 6);
        getContentPane().add(jButton1, gridBagConstraints);

        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 218;
        gridBagConstraints.ipady = 126;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jScrollPane5.setMaximumSize(new java.awt.Dimension(32767, 16));

        jTextArea1.setColumns(20);
        jTextArea1.setMaximumSize(new java.awt.Dimension(2147483647, 10));
        jScrollPane5.setViewportView(jTextArea1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 218;
        gridBagConstraints.ipady = 40;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 0);
        getContentPane().add(jScrollPane5, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        joinRoomBtn.setText("Rejoindre / Créer");
        joinRoomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                joinRoomBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(joinRoomBtn, gridBagConstraints);

        usernameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        usernameTextField.setMinimumSize(new java.awt.Dimension(125, 20));
        usernameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                usernameTextFieldKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(usernameTextField, gridBagConstraints);

        roomTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        roomTextField.setMinimumSize(new java.awt.Dimension(125, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(roomTextField, gridBagConstraints);

        jLabel1.setText("Nom utilisateur");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Room name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 5, 10);
        jPanel1.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel1, gridBagConstraints);

        jMenu1.setText("Connexion");

        jMenuItem1.setText("Se connecter");
        jMenuItem1.setName("btConnexion"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConnexionActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Se déconnecter");
        jMenuItem2.setName("btDeconnexion"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeconnexionActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String msg = jTextArea1.getText();
        if (msg.isBlank()) {
            JOptionPane.showMessageDialog(this, "Veuillez donner un message qui n'est pas vide sinon ça va pas le faire", "Erreur", JOptionPane.ERROR_MESSAGE);
        } else {
            Message message = Message.textMessage(msg, nomUtilisateur, roomName);
            String serializedMessage = new Gson().toJson(message);
            emissionThread = new EmissionThread(socOut, serializedMessage);
            emissionThread.start();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void closeEverything() {
        final JFrame parent = this;
        new Thread(() -> {
            if (clientSocket != null && !clientSocket.isClosed()) {
                try {
                    clientSocket.close();
                    recieveThread.interrupt();
                    socOut.close();
                    socIn.close();
                    JOptionPane.showMessageDialog(parent, "Déconnexion réussie", "Déconnexion", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(parent, "Echec de déconnexion", "Erreur", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(EchoClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                JOptionPane.showMessageDialog(parent, "Vous n'êtes pas connecté...", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
        }).start();
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeEverything();
    }//GEN-LAST:event_formWindowClosing

    private void btConnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConnexionActionPerformed
        final JFrame parent = this;
        new Thread(() -> {
            JPanel panelDialog = new JPanel();
            JTextField fieldAdresse = new JTextField(5);
            JTextField fieldPort = new JTextField(5);
            panelDialog.add(new JLabel("Adresse:"));
            panelDialog.add(fieldAdresse);
            panelDialog.add(Box.createHorizontalStrut(15)); // a spacer
            panelDialog.add(new JLabel("Port:"));
            panelDialog.add(fieldPort);

            int res = JOptionPane.showConfirmDialog(parent, panelDialog, "Entrez les informations de connexion", JOptionPane.OK_CANCEL_OPTION);
            if (res == JOptionPane.OK_OPTION) {
                try {
                    if (clientSocket == null || (clientSocket != null && clientSocket.isClosed())) {
                        clientSocket = new Socket();
                    }
                    clientSocket.connect(new InetSocketAddress(fieldAdresse.getText(), Integer.parseInt(fieldPort.getText())));
                    JOptionPane.showMessageDialog(parent, "Connexion établie", "Réussite", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(parent, "Echec de connexion", "Erreur", JOptionPane.ERROR_MESSAGE);
                    Logger.getLogger(EchoClientGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            try {
                socOut = new PrintWriter(clientSocket.getOutputStream());

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(parent, "Echec de connexion", "Erreur", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(EchoClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                socIn = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                recieveThread = new RecieveThread(socIn, this);
                recieveThread.start();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(parent, "Echec de connexion", "Erreur", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(EchoClientGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }//GEN-LAST:event_btConnexionActionPerformed

    private void btDeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeconnexionActionPerformed
        closeEverything();
    }//GEN-LAST:event_btDeconnexionActionPerformed

    private void joinRoomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_joinRoomBtnActionPerformed
        if (clientSocket != null && !clientSocket.isClosed()) {
            roomName = roomTextField.getText();
            destUsername = usernameTextField.getText();
            if(!destUsername.isBlank() && !roomName.isBlank()){
                JOptionPane.showMessageDialog(this, "Vous avez donné un nom d'utilisateur donc ça ne va pas le faire", "Erreur", JOptionPane.ERROR_MESSAGE);
            }
            if (roomName.isBlank()) {
                if (destUsername.isBlank()) {
                    JOptionPane.showMessageDialog(this, "Veuillez donner un nom qui n'est pas vide sinon ça va pas le faire", "Erreur", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                String concatenated;
                if (destUsername.compareTo(nomUtilisateur) < 0) {
                    concatenated = nomUtilisateur + destUsername;
                } else {
                    concatenated = destUsername + nomUtilisateur;
                }

                roomName = String.valueOf(concatenated.hashCode());
            }
            clearMessages();
            Message message = Message.joinRoomMessage(nomUtilisateur, roomName);
            String serializedMessage = new Gson().toJson(message);
            emissionThread = new EmissionThread(socOut, serializedMessage);
            emissionThread.start();
            jButton1.setEnabled(true);
            
        } else {
            JOptionPane.showMessageDialog(this, "Vous n'êtes pas connecté...", "Erreur", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_joinRoomBtnActionPerformed

    private void usernameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameTextFieldKeyTyped
        System.out.println(usernameTextField.getText());
        if(!usernameTextField.getText().isBlank()){
            roomTextField.setEnabled(false);
            roomTextField.setText("");
        }
        else{
            roomTextField.setEnabled(true);
        }
    }//GEN-LAST:event_usernameTextFieldKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EchoClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EchoClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EchoClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EchoClientGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FlatDarkLaf.setup();
                new EchoClientGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton joinRoomBtn;
    private javax.swing.JTextField roomTextField;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
